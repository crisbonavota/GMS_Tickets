stages:
    - test
    - build-src
    - update-images-dev
    - update-images-prod
    - docker-compose-up-dev
    - docker-compose-up-prod
    - prune-images

variables:
    PIPELINE_ID: $CI_PIPELINE_ID
    CURRENT_BRANCH: $CI_COMMIT_REF_NAME
    NODE_VERSION: '17.4.0'
    LETSENCRYPT_EMAIL: itteam@tonic3.com

    NETWORK: nginx-proxy-default

# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

include:
    - template: Security/SAST.gitlab-ci.yml

sast:
    stage: test
    tags:
        - docker-gms-dev

gms:
    stage: build-src
    tags:
        - docker-gms-dev
    image: node:$NODE_VERSION
    script:
        - node --version
        - npm install
        - npm i -g nx
        #- npm run test
        - nx run hr-employees:build:production --verbose
        - nx run hr-updates:build:production --verbose
        - nx run pm-projects:build:production --verbose
        - nx run tt-reports:build:production --verbose
        - nx run tt-load:build:production --verbose
        - nx run login:build:production --verbose
        - nx run home:build:production --verbose
        - nx run container:build:production --verbose
    artifacts:
        paths:
            - dist
        expire_in: 1 week

update-images-dev:
    stage: update-images-dev
    variables:
        VIRTUAL_HOST: gms.devw3americas.com
        LETSENCRYPT_HOST: gms.devw3americas.com
        CONTAINER_NAME: gms-dev
        PIPELINE_ID: $CI_PIPELINE_ID
        IMAGE: gms-dev:latest
    tags:
        - gms-new
    script:
        - docker build -t gms-dev-img .
        - docker-compose pull
    rules:
        - if: '$CI_COMMIT_BRANCH == "develop"'

update-images-prod:
    stage: update-images-prod
    variables:
        VIRTUAL_HOST: gms.tonic3.com
        LETSENCRYPT_HOST: gms.tonic3.com
        CONTAINER_NAME: gms-dev
        IMAGE: gms-dev:latest
        PIPELINE_ID: $CI_PIPELINE_ID
    tags:
        - gms-new
    script:
        - docker build -t gms-prod-img .
        - docker-compose pull
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'

build-and-restart-containers-dev:
    stage: docker-compose-up-dev
    variables:
        VIRTUAL_HOST: gms.devw3americas.com
        LETSENCRYPT_HOST: gms.devw3americas.com
        CONTAINER_NAME: gms-dev
        IMAGE: gms-dev:latest
        PIPELINE_ID: $CI_PIPELINE_ID
    tags:
        - gms-new
    script:
        - docker-compose -f docker-compose.yml up -d --build --remove-orphans dev-service
    rules:
        - if: '$CI_COMMIT_BRANCH == "develop"'

build-and-restart-containers-prod:
    stage: docker-compose-up-prod
    variables:
        VIRTUAL_HOST: gms.tonic3.com
        LETSENCRYPT_HOST: gms.tonic3.com
        CONTAINER_NAME: gms-prod
        IMAGE: gms-prod:latest
        PIPELINE_ID: $CI_PIPELINE_ID
    tags:
        - gms-new
    script:
        - docker-compose -f docker-compose.yml up -d --build --remove-orphans prod-service
    rules:
        - if: '$CI_COMMIT_BRANCH == "master"'

prune-images:
    stage: prune-images
    tags:
        - gms-new
    script:
        - docker image prune -a -f
